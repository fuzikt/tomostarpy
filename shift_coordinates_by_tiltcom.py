#!/usr/bin/env python3

import os
import sys
import re
import math
import lib.matrix3 as matrix3
import lib.euler as euler
from lib.metadata import MetaData
import argparse


class shiftCoordinatesByTiltcom:
    def define_parser(self):
        self.parser = argparse.ArgumentParser(
            description="Shift particle coordiantes in input STAR file, by recalculalting the difference between the two reconstructions defined in --tiltcom1 and --tiltcom2.")
        add = self.parser.add_argument
        add('--i', help="Input STAR file name with particles.")
        add('--o', help="Output STAR file name.")
        add('--tiltcom1', type=str, default="",
            help="tilt.com file (generated by IMOD) of the tomogram of the input coordinates")
        add('--tiltcom2', type=str, default="",
            help="tilt.com file (generated by IMOD) of the tomogram for the output coordinates")
        add('--xtilt', type=str, default="0.00",
            help="Tomo X axis tilt in degrees. (Default: 0)")
        add('--ytilt', type=str, default="0.00",
            help="Tomo Y axis tilt in degrees. (Default: 0)")

    def usage(self):
        self.parser.print_help()

    def error(self, *msgs):
        self.usage()
        print("Error: " + '\n'.join(msgs))
        print(" ")
        sys.exit(2)

    def validate(self, args):
        if len(sys.argv) == 1:
            self.error("No input file given.")

        if not os.path.exists(args.i):
            self.error("Input file '%s' not found."
                       % args.i)

    def readTiltCom(self, filename):
        xaxistilt = 0
        width = 0
        slice1 = 0
        slice2 = 0
        shift1 = 0
        shift2 = 0
        with open(filename) as file:
            for line in file:
                if "WIDTH" in line:
                    width = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                if "SLICE" in line:
                    slice1 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                    slice2 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[1])
                if "THICKNESS" in line:
                    thickness = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                if "SHIFT" in line:
                    shift1 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                    shift2 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[1])
                if "XAXISTILT" in line:
                    xaxistilt = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                if "FULLIMAGE" in line:
                    fullimage1 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[0])
                    fullimage2 = float(re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", line)[1])
        if width == 0:
            width = fullimage1
        if slice2 == 0:
            slice2 = fullimage2

        return width, slice1, slice2, thickness, shift1, shift2, xaxistilt

    def get_particles(self, md):
        particles = []
        for particle in md:
            particles.append(particle)
        return particles

    def main(self):
        self.define_parser()
        args = self.parser.parse_args()

        self.validate(args)

        Xtilt = float(args.xtilt)
        Ytilt = float(args.ytilt)

        md = MetaData(args.i)

        new_particles = []

        print("Reading in input star file.....")

        particles = self.get_particles(md)

        optic_groups = []
        for optic_group in md.data_optics:
            optic_groups.append(optic_group)

        # get unbinned apix from star file
        apix = float(optic_groups[0].rlnTomoTiltSeriesPixelSize)

        (origWIDTH, origSLICE1, origSLICE2, origTHICKNESS, origSHIFT1, origSHIFT2, origXAXISTILT) = self.readTiltCom(
            args.tiltcom1)
        (newWIDTH, newSLICE1, newSLICE2, newTHICKNESS, newSHIFT1, newSHIFT2, newXAXISTILT) = self.readTiltCom(
            args.tiltcom2)

        offset_x = ((newWIDTH - origWIDTH) / 2 - origSHIFT1 + newSHIFT1)
        offset_y = origSLICE1 - newSLICE1
        offset_z = ((newTHICKNESS - origTHICKNESS) / 2 + origSHIFT2 - newSHIFT2)

        for particle in particles:
            particle.rlnCoordinateX += offset_x
            particle.rlnCoordinateY += offset_y
            particle.rlnCoordinateZ += offset_z

            if Xtilt != 0 or Ytilt != 0:
                tomoWidth = newWIDTH
                tomoHeight = newSLICE2 - newSLICE1
                tomoThickness = newTHICKNESS

                dx = (particle.rlnCoordinateX - particle.rlnOriginXAngst / apix) - tomoWidth / 2
                dy = (particle.rlnCoordinateY - particle.rlnOriginYAngst / apix) - tomoHeight / 2
                dz = (particle.rlnCoordinateZ - particle.rlnOriginZAngst / apix) - tomoThickness / 2

                rot_m = matrix3.matrix_from_euler_xyz(math.radians(Xtilt), math.radians(Ytilt), 0)
                particle.rlnCoordinateX = tomoWidth / 2 + dx * rot_m.m[0][0] + dy * rot_m.m[0][1] + dz * rot_m.m[0][2]
                particle.rlnCoordinateY = tomoHeight / 2 + dx * rot_m.m[1][0] + dy * rot_m.m[1][1] + dz * rot_m.m[1][2]
                particle.rlnCoordinateZ = tomoThickness / 2 + dx * rot_m.m[2][0] + dy * rot_m.m[2][1] + dz * rot_m.m[2][
                    2]
                particle.rlnOriginXAngst = 0
                particle.rlnOriginYAngst = 0
                particle.rlnOriginZAngst = 0

                particle_rot_matrix = matrix3.matrix_from_euler(particle.rlnAngleRot, particle.rlnAngleTilt,
                                                                particle.rlnAnglePsi)

                rotated_particle_matrix = matrix3.matrix_multiply(rot_m, particle_rot_matrix)

                [particle.rlnAngleRot, particle.rlnAngleTilt, particle.rlnAnglePsi] = euler.euler_from_matrix(
                    rotated_particle_matrix)

        new_particles.extend(particles)

        if md.version == "3.1":
            mdOut = md.clone()
            dataTableName = "data_particles"
            mdOut.removeDataTable(dataTableName)
        else:
            mdOut = MetaData()
            dataTableName = "data_"

        mdOut.addDataTable(dataTableName, md.isLoop(dataTableName))
        mdOut.addLabels(dataTableName, md.getLabels(dataTableName))
        mdOut.addData(dataTableName, new_particles)

        mdOut.write(args.o)

        print("New star file %s created. Have fun!" % args.o)


if __name__ == "__main__":
    shiftCoordinatesByTiltcom().main()
